<snippets>

	<!--context="Function"-->

	<snippet name="ifElseSnippet" info="if { code } else { code }">
		<![CDATA[if (${1:true}) {
	${SELECTED_TEXT}$0
} else {
	
}]]>
	</snippet>
	<snippet name="ifSurround" info="if { code }">
		<![CDATA[if (${1:true}) {
	${SELECTED_TEXT}$0
}]]>
	</snippet>
	<snippet name="forLoopSnippet" info="Repeat { code } count times." more="See also: Cookbook recipe &quot;for, foreach&quot;.">
		<![CDATA[for (int ${1:i} = 0; $1 < ${2:count}; $1++) {
	${SELECTED_TEXT}$0
}]]>
	</snippet>
	<snippet name="forReverseSnippet" info="Repeat { code } count times." more="See also: Cookbook recipe &quot;for, foreach&quot;.">
		<![CDATA[for (int ${1:i} = ${2:count}; --$1 >= 0; ) {
	${SELECTED_TEXT}$0
}]]>
	</snippet>
	<snippet name="switchSnippet" info="Go to a case that matches a variable, or default if none.">
		<list item="switch statement">
			<![CDATA[switch (${1:variable}) {
case ${2:C}:
	$0
	break;
case ${3:C}:
	
	break;
case ${4:C}:
	
	break;
case ${5:C}:
	
	break;
case ${6:C}:
	
	break;
case ${7:C}:
	
	break;
case ${8:C}:
	
	break;
case ${9:C}:
	
	break;
case ${10:C}:
	
	break;
default:
	
	break;
}]]>
		</list>
		<list item="switch &amp;expression, 1 line">
			<![CDATA[var ${1:result} = ${2:variable} switch { ${3:C} => ${4:R}, ${5:C} => ${6:R}, ${7:C} => ${8:R}, _ => ${10:default} };]]>
		</list>
		<list item="switch expression, &amp;multiline">
			<![CDATA[var ${1:result} = ${2:variable} switch {
	${3:C} => ${4:R},
	${5:C} => ${6:R},
	${7:C} => ${8:R},
	${9:C} => ${10:R},
	${11:C} => ${12:R},
	${13:C} => ${14:R},
	${15:C} => ${16:R},
	${17:C} => ${18:R},
	${19:C} => ${20:R},
	_ => ${21:default}
};]]>
		</list>
	</snippet>
	<snippet name="trySnippet" info="Exception handling." more="See also: Cookbook recipe &quot;Errors, exceptions&quot;.">
		<list item="catch">
			<![CDATA[try {
	${SELECTED_TEXT}
}
catch(${1:Exception} ex) { $0 }]]>
		</list>
		<list item="&amp;finally">
			<![CDATA[try {
	${SELECTED_TEXT}
}
finally { $0 }]]>
		</list>
		<list item="c&amp;atch finally">
			<![CDATA[try {
	${SELECTED_TEXT}
}
catch(${1:Exception} ex) { $0 }
finally {  }]]>
		</list>
	</snippet>
	<snippet name="threadSnippet" info="Run action in other thread.">
		<list item="Start new thread">
			<![CDATA[run.thread(() => { $0 });]]>
		</list>
		<list item="Use thread pool">
			<![CDATA[Task.Run(() => { $0 });]]>
		</list>
	</snippet>
	<snippet name="dsDialogShowSnippet" info="Standard dialog window." more="See also: wpfDialogSnippet.">
		<list item="OK button">
			<![CDATA[dialog.show("${1:header}", $"${2:text}"$3);]]>
		</list>
		<list item="OK button and &amp;info icon">
			<![CDATA[dialog.showInfo("${1:header}", $"${2:text}"$3);]]>
		</list>
		<list item="OK button and &amp;warning icon">
			<![CDATA[dialog.showWarning("${1:header}", $"${2:text}"$3);]]>
		</list>
		<list item="OK button and &amp;error icon">
			<![CDATA[dialog.showError("${1:header}", $"${2:text}"$3);]]>
		</list>
		<list item="OK and &amp;Cancel buttons">
			<![CDATA[if (!dialog.showOkCancel("${1:header}", $"${2:text}"$3)) return;]]>
		</list>
		<list item="&amp;Yes and No buttons">
			<![CDATA[if (!dialog.showYesNo("${1:header}", $"${2:text}"$3)) return;]]>
		</list>
		<list item="Custom &amp;buttons">
			<![CDATA[int button = dialog.show("${1:header}", $"${2:text}", "${3:1 OK|2 Cancel|3 Yes|4 No|5 Retry|6 Close|10 Button1|11 Button2}", flags: DFlags.CommandLinks$4);
switch (button) {
case 1: $0 break;
case 3:  break;
case 4:  break;
case 5:  break;
case 6:  break;
case 10:  break;
case 11:  break;
default: return;
}]]>
		</list>
		<list item="&amp;List of buttons">
			<![CDATA[int button = dialog.showList("${1:one|two|three}", "${2:header}", $"${3:text}"$4);}]]>
		</list>
		<list item="&amp;Text input">
			<![CDATA[if (!dialog.showInput(out string ${1:s}, "${2:header}", $"${3:text}"$4)) return;]]>
		</list>
		<list item="&amp;Number input">
			<![CDATA[if (!dialog.showInputNumber(out int ${1:i}, "${2:header}", $"${3:text}"$4)) return;]]>
		</list>
	</snippet>
	<snippet name="winFindSnippet" info="Find window.">
		<![CDATA[var w = wnd.find(0, "${1:*Name}");]]>
	</snippet>
	<snippet name="osdSnippet" info="Show OSD text (on-screen display) or tooltip.">
		<list item="Transparent text">
			<![CDATA[osdText.showTransparentText($0);]]>
		</list>
		<list item="Tooltip">
			<![CDATA[osdText.showText($0);]]>
		</list>
		<list item="Transparent text, until current function ends">
			<![CDATA[using var osd = osdText.showTransparentText($0, -1);]]>
		</list>
		<list item="Tooltip, until current function ends">
			<![CDATA[using var osd = osdText.showText($0, -1);]]>
		</list>
	</snippet>
	<snippet name="triggerSnippet" info="Add hotkey, autotext, mouse or window trigger." more="Add triggers in a file that contains triggers of this type. To open, use menu TT. Local triggers can be in any other script.">
		<list item="Hotkey">
			<![CDATA[hk["${1:Ctrl+E}"] = o => { $0 };]]>
		</list>
		<list item="Autotext">
			<![CDATA[tt["${1:text}"] = o => { $0 };]]>
		</list>
		<list item="Autotext replace">
			<![CDATA[tt["${1:text}"] = o => o.Replace("${2:replacement}");]]>
		</list>
		<list item="Autotext simple replace">
			<![CDATA[tr["${1:text}"] = "${2:replacement}";]]>
		</list>
		<list item="Autotext menu">
			<![CDATA[tt["${1:text}"] = o => o.Menu([
	"${2:replacement1}",
	new("Label1", "replacement2"),
	new("Label2", "replacement3", "<b>html</b>"),
	"<tag>[[|]]</tag>",
	]);]]>
		</list>
		<list item="Mouse click">
			<![CDATA[Triggers.Mouse[TMClick.$1] = o => { $0 };]]>
		</list>
		<list item="Mouse wheel">
			<![CDATA[Triggers.Mouse[TMWheel.$1] = o => { $0 };]]>
		</list>
		<list item="Mouse edge">
			<![CDATA[Triggers.Mouse[TMEdge.$1] = o => { $0 };]]>
		</list>
		<list item="Mouse move">
			<![CDATA[Triggers.Mouse[TMMove.$1] = o => { $0 };]]>
		</list>
		<list item="Window">
			<![CDATA[Triggers.Window[TWEvent.ActiveNew, "$1"] = o => { $0 };]]>
		</list>
		<list item="Local triggers" using="Au.Triggers">
			<![CDATA[//Script-local triggers running all the time, as main script code.
ActionTriggers Triggers = new();

//trigger examples
var hk = Triggers.Hotkey;
hk["Ctrl+F1"] = o => { print.it(o); };
hk["Win+F1"] = o => { Triggers.Stop(); };

Triggers.Run(); //waits
]]>
		</list>
		<list item="Local triggers thread" using="Au.Triggers">
			<![CDATA[//Script-local triggers running simultaneously with main script code until it ends.
run.thread(() => {
	ActionTriggers Triggers = new();
	
	//trigger examples
	var hk = Triggers.Hotkey;
	hk["Ctrl+F1"] = o => { print.it(o); };
	
	//Triggers.Mouse[TMEdge.Right] = o => { print.it(o); };
	//Triggers.Window[TWEvent.ActiveNew, "* Notepad"] = o => { print.it(o); };
	
	Triggers.Run();
});
dialog.show("Testing triggers thread"); //replace this line with real script code
]]>
		</list>
	</snippet>
	<snippet name="stringBuilderSnippet" info="Create string with StringBuilder.">
		<![CDATA[StringBuilder ${1:b} = new();
$1.Append($0);
$1.AppendLine();
$1.AppendFormat("{0}, {1}", 10, 20);
var s = $1.ToString();
print.it(s);]]>
	</snippet>
	<snippet name="ifActiveWindowSnippet" info="If the active window is...">
		<![CDATA[var ${1:w} = wnd.active;
if ($1.IsMatch("${2:*Name}")) {
	$0
}]]>
	</snippet>
	<snippet name="ifKeySnippet" info="If key is down (pressed).">
		<list item="Ctrl">
			<![CDATA[if (keys.isCtrl) { $0 }]]>
		</list>
		<list item="Shift">
			<![CDATA[if (keys.isShift) { $0 }]]>
		</list>
		<list item="Alt">
			<![CDATA[if (keys.isAlt) { $0 }]]>
		</list>
		<list item="Win">
			<![CDATA[if (keys.isWin) { $0 }]]>
		</list>
		<list item="Ctrl, Shift, Alt or Win">
			<![CDATA[if (keys.isMod()) { $0 }]]>
		</list>
		<list item="Specified key">
			<![CDATA[if (keys.isPressed(KKey.$1)) { $0 }]]>
		</list>
		<list item="Caps Lock toggled">
			<![CDATA[if (keys.isCapsLock) { $0 }]]>
		</list>
		<list item="Num Lock toggled">
			<![CDATA[if (keys.isNumLock) { $0 }]]>
		</list>
		<list item="Scroll Lock toggled">
			<![CDATA[if (keys.isScrollLock) { $0 }]]>
		</list>
	</snippet>
	<snippet name="speedOptSnippet" info="Change sleep times used by mouse, keyboard and clipboard functions.">
		<list item="All speed options">
			<![CDATA[//all speed opt, with default values. Delete lines you don't need. Edit values.
opt.key.KeySpeed = 1;
opt.key.TextSpeed = 0;
opt.key.SleepFinally = 10;
opt.key.PasteSleep = 100;
opt.key.KeySpeedClipboard = 5;
opt.mouse.ClickSpeed = 20;
opt.mouse.ClickSleepFinally = 10;
opt.mouse.MoveSpeed = 0;
opt.mouse.MoveSleepFinally = 10;
]]>
		</list>
		<list item="For windows">
			<![CDATA[//different options depending on the active window
opt.key.Hook = k => {
	var w = k.w.Window;
	//print.it(w);
	string name = w.Name, cn = w.ClassName;
	if (name.Like("*Word Online - Google Chrome")) { //example
		k.optk.TextHow = OKeyText.Paste;
		k.optk.PasteSleep = 400;
	}
	//else if (...) { ... }
	//else if (...) { ... }
};
]]>
		</list>
		<list item="For triggers">
			<![CDATA[//options for trigger actions of triggers added afterwards
Triggers.Options.BeforeAction = o => {
	//set opt options here
};
]]>
		</list>
	</snippet>
	<snippet name="perfSnippet" info="Measure code speed.">
		<list item="&amp;Static">
			<![CDATA[perf.first();$0
perf.next();
perf.nw();]]>
		</list>
		<list item="&amp;Local, auto-NW">
			<![CDATA[using var p1 = perf.local();$0
p1.Next();]]>
		</list>
	</snippet>
	<snippet name="menuSnippet" info="Popup menu.">
		<list item="Menu for automation scripts">
			<![CDATA[var ${1:m} = new popupMenu("${GUID}");

$1["${2:Text}"] = o => { $0 };
$1[""] = o => {  };
$1.Submenu("", $1 => {
	$1[""] = o => {  };
	$1[""] = o => {  };
});
$1.Separator();
$1["Run program|Tooltip"] = o => run.it(folders.System + @"notepad.exe");
$1["Run script"] = o => script.run("Script123456789.cs");
$1["Copy-paste"] = o => {
	string s = clipboard.copy();
	s = s.Upper();
	clipboard.paste(s);
};

$1.Show();]]>
		</list>
		<list item="Context menu for your program">
			<![CDATA[var ${1:m} = new popupMenu();

$1["${2:Text}"] = o => { $0 };
$1[""] = o => {  };
$1.Submenu("", $1 => {
	$1[""] = o => {  };
	$1[""] = o => {  };
});
$1.Separator();
$1[""] = o => {  };
$1[""] = o => {  };

$1.Show();]]>
		</list>
		<list item="Simple menu, returns item id">
			<![CDATA[int ${1:id} = popupMenu.showSimple("${2:1 One|2 Two|3 Three||0 Cancel}");
switch ($1) {
case 1: $0 break;
case 2:  break;
case 3:  break;
default: return;
}]]>
		</list>
	</snippet>
	<snippet name="menuItemSnippet" info="Menu item." more="Other ways: drag-drop scripts, files, links; hotkey Ctrl+Shift+Q. More info in Cookbook." var="Au.popupMenu,m">
		<![CDATA[${VAR}["${1:Text}"] = o => { $0 };]]>
	</snippet>
	<snippet name="menuSubmenuSnippet" info="Menu submenu." var="Au.popupMenu,m">
		<![CDATA[${VAR}.Submenu("${1:Text}", ${VAR} => {
	${VAR}["${2:Text}"] = o => { $0 };
	${VAR}[""] = o => {  };
});]]>
	</snippet>
	<snippet name="tbToolbarButtonSnippet" info="Toolbar button." more="Other ways: drag-drop scripts, files, links; hotkey Ctrl+Shift+Q. More info in Cookbook." var="Au.toolbar,t">
		<![CDATA[${VAR}["${1:Text}"] = o => { $0 };]]>
	</snippet>
	<snippet name="tbToolbarMenuSnippet" info="Toolbar drop-down menu." var="Au.toolbar,t">
		<![CDATA[${VAR}.Menu("${1:Text}", ${VAR} => {
	${VAR}["${2:Text}"] = o => { $0 };
	${VAR}[""] = o => {  };
});]]>
	</snippet>
	<snippet name="wpfDialogSnippet" info="Create dialog window." more="See also: dialogSnippet, menu File &gt; New &gt; Dialogs." using="System.Windows;System.Windows.Controls;System.Windows.Controls.Primitives;System.Windows.Input;System.Windows.Media">
		<![CDATA[var b = new wpfBuilder("${1:Window}").WinSize(400);
b.R.Add("Text", out TextBox text1).Focus();
b.R.Add("Combo", out ComboBox combo1).Items("Zero|One|Two");
b.R.Add(out CheckBox c1, "Check");
b.R.AddButton("Button", _ => { print.it("Button clicked"); });
b.R.AddOkCancel();
b.End();
#if WPF_PREVIEW //menu Edit > View > WPF preview
b.Window.Preview();
#endif
if (!b.ShowDialog()) return;
//print.it(text1.Text, combo1.SelectedIndex, c1.IsChecked == true);]]>
	</snippet>
	<snippet name="wpfWndprocSnippet" info="Set WPF window hook to receives messages." using="System.Windows;System.Windows.Interop">
		<![CDATA[${1:window}.SourceInitialized += (o, _) => {
	var hs = PresentationSource.FromVisual(o as Window) as HwndSource;
	hs.AddHook(_WndProc);
	nint _WndProc(nint hwnd, int msg, nint wParam, nint lParam, ref bool handled) {
		var w = (wnd)hwnd;
		//WndUtil.PrintMsg(w, msg, wParam, lParam);
		
		switch (msg) {
		
		}
		
		return 0;
	}
};]]>
	</snippet>
	<snippet name="ssScriptSetupSnippet" info="Set run-time options such as tray icon and emergency exit ways.">
		<![CDATA[//.
script.setup(trayIcon: true, sleepExit: true);
//..
]]>
	</snippet>
	<snippet name="piPrintItSnippet" info="Display text and variables in the output window.">
		<![CDATA[print.it($0);]]>
	</snippet>
	<snippet name="outPrintItSnippet" info="Display text and variables in the output window.">
		<![CDATA[print.it($0);]]>
	</snippet>
	<snippet name="pcPrintClearSnippet" info="Clear the output window.">
		<![CDATA[print.clear();]]>
	</snippet>
	<snippet name="kkKeysSendSnippet" info="Generate virtual keystrokes (keys, text).">
		<![CDATA[keys.send("$0");]]>
	</snippet>
	<snippet name="ktKeysSendtSnippet" info="Send text to the active window using virtual keystrokes.">
		<![CDATA[keys.sendt($0);]]>
	</snippet>
	<snippet name="pasteSnippet" info="Paste text using the clipboard and Ctrl+V.">
		<![CDATA[clipboard.paste($0);]]>
	</snippet>
	<snippet name="copySnippet" info="Get the selected text using the clipboard and Ctrl+C." context="Function">
		<list item="&amp;Copy">
			<![CDATA[string ${1:s} = clipboard.copy();$0]]>
		</list>
		<list item="&amp;Try copy">
			<![CDATA[if (!clipboard.tryCopy(out var ${1:s}, 500)) return;$0]]>
		</list>
		<list item="C&amp;ut">
			<![CDATA[string ${1:s} = clipboard.copy(cut: true);$0]]>
		</list>
	</snippet>
	<snippet name="riRunItSnippet" info="Run a program or open a document, folder, web page." more="Tip: drag and drop.">
		<![CDATA[run.it(${1:folders.System + @"notepad.exe"});]]>
	</snippet>
	<snippet name="srScriptRunSnippet" info="Start to execute a script." more="Tip: drag and drop.">
		<![CDATA[script.run(@"${1:\Folder\Script}.cs");]]>
	</snippet>
	<snippet name="failedSnippet" info="Throw 'failed' exception." more="Exception text is optional.">
		<![CDATA[throw new ${2:AuException}($1);]]>
	</snippet>

	<!--context="Type"-->

	<snippet name="propSnippet" info="Property.">
		<list item="{ get; set; }">
			<![CDATA[public ${1:string} ${2:Property} { get; set; }]]>
		</list>
		<list item="{ get; &amp;private set; }">
			<![CDATA[public ${1:string} ${2:Property} { get; private set; }]]>
		</list>
		<list item="{ g&amp;et {  } set {  } }">
			<![CDATA[public ${1:string} ${2:Property} {
	get {
		$0
	}
	set {
		
	}
}]]>
		</list>
	</snippet>

	<!--context="Namespace|Type"-->

	<snippet name="nativeApiSnippet" info="Adds class for Windows API declarations.">
		<![CDATA[/// <summary>
/// Add an empty class like this in scripts (at the end) and projects (in any file) where you want to use Windows API.
/// Then, whenever you need an API function etc, type the class name and dot (api.). The completion list contains API names and adds declarations to this class.
/// </summary>
#pragma warning disable 649, 169 //field never assigned/used
unsafe class ${1:api} : NativeApi {}
#pragma warning restore 649, 169 //field never assigned/used]]>
	</snippet>
	<snippet name="settingsSnippet" info="Adds a class for settings used by this script/program/library/etc.">
		<![CDATA[/// <summary>
/// Settings of this script/program/library/etc.
/// Function <see cref="MySettings.Load"/> loads settings from file or creates default; returns a new variable that lets you get or set settings, like <c>var v = sett.i; sett.i = 2;</c>.
/// Settings are lazily auto-saved soon after changing.
/// </summary>
internal record class MySettings : JSettings {
	public static readonly string File = folders.ThisAppDocuments + @"${1:RenameMe}.json";

	public static MySettings Load() => Load<MySettings>(File);
	
	//examples of settings. Most types are supported. Use public fields.
	public int i;
	public string s = "default";
	public string[] a = [];
}

//add this at class level:
//internal static readonly MySettings sett = MySettings.Load();

//or in script as local variable:
//using var sett = MySettings.Load();]]>
	</snippet>

	<!--context="Namespace"-->

	<!--rejected: programMainSurround.-->

	<!--context="Attributes"-->

	<snippet name="marshalAsSnippet" info="Adds MarshalAs attribute." more="Then press dot and select from list." context="Attributes">
		<![CDATA[MarshalAs(UnmanagedType$0)]]>
	</snippet>

	<!--context="Any|Line"-->

	<snippet name="#ifSnippet" info="Enables or disables code depending on a preprocessor expression.">
		<![CDATA[#if ${1:true}
${SELECTED_TEXT}$0
#else
#endif]]>
	</snippet>
	<snippet name="#regionSnippet" info="Fold (hide) code lines.">
		<![CDATA[#region ${1}
				
${SELECTED_TEXT}$0

#endregion]]>
	</snippet>

	<!--context="Any"-->
	
	<snippet name="//.Surround" info="Fold (hide) code lines." more="In LibreAutomate it is the same as #region. Can be //. or //. text.">
		<![CDATA[//.
${SELECTED_TEXT}$0
//..]]>
	</snippet>
</snippets>