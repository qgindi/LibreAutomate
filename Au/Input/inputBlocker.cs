namespace Au
{
	/// <summary>
	/// Blocks keyboard and/or mouse input events from reaching applications.
	/// </summary>
	/// <remarks>
	/// Uses keyboard and/or mouse hooks. Does not use API <b>BlockInput</b>, it does not work on current Windows versions.
	/// Blocks hardware-generated events and software-generated events, except generated by functions of this library.
	/// Functions of this library that send keys or text use this class internally, to block user-pressed keys and resend them afterwards (see <see cref="ResendBlockedKeys"/>).
	/// Does not block:
	/// - In windows of the same thread that started blocking. For example, if your script shows a message box, the user can click its buttons.
	/// - In windows of higher [](xref:uac) integrity level (IL) processes, unless this process has uiAccess IL.
	/// - In special desktops/screens, such as when you press <c>Ctrl+Alt+Delete</c> or launch an admin program that requires UAC elevation. See also <see cref="ResumeAfterCtrlAltDelete"/>.
	/// - Some Windows hotkeys, such as <c>Ctrl+Alt+Delete</c> and <c>Win+L</c>.
	/// - Keyboard hooks don't work in windows of this process if this process uses direct input or raw input API.
	/// 
	/// To stop blocking, can be used <c>using</c>, like in the example. Or <c>try</c> with <c>finally</c> code that calls <see cref="Dispose"/> or <see cref="Stop"/>. Also automatically stops when this thread ends. Users can stop with <c>Ctrl+Alt+Delete</c>.
	/// </remarks>
	/// <example>
	/// <code><![CDATA[
	/// using(new inputBlocker(BIEvents.All)) {
	/// 	print.it("blocked");
	/// 	5.s();
	/// }
	/// print.it("not blocked");
	/// ]]></code>
	/// </example>
	public sealed unsafe class inputBlocker : IDisposable
	{
		Handle_ _syncEvent, _stopEvent;
		Handle_ _threadHandle;
		keys _blockedKeys;
		long _startTime;
		BIEvents _block;
		int _threadId;
		bool _disposed;
		bool _discardBlockedKeys;

		//note: don't use API BlockInput because:
		//	UAC. Fails if our process has Medium IL.
		//	Too limited, eg cannot block only keys or only mouse.

		/// <summary>
		/// This constructor does nothing (does not call <see cref="Start"/>).
		/// </summary>
		public inputBlocker() { }

		/// <summary>
		/// This constructor calls <see cref="Start"/>.
		/// </summary>
		/// <exception cref="ArgumentException"><i>what</i> is 0.</exception>
		public inputBlocker(BIEvents what) {
			Start(what);
		}

		/// <summary>
		/// Starts blocking.
		/// </summary>
		/// <exception cref="ArgumentException"><i>what</i> is 0.</exception>
		/// <exception cref="InvalidOperationException">Already started.</exception>
		public void Start(BIEvents what) {
			if (_disposed) throw new ObjectDisposedException(nameof(inputBlocker));
			if (_block != 0) throw new InvalidOperationException();
			if (!what.HasAny(BIEvents.All)) throw new ArgumentException();

			_block = what;
			_startTime = Environment.TickCount64;

			_syncEvent = Api.CreateEvent(false);
			_stopEvent = Api.CreateEvent(false);
			_threadHandle = Api.OpenThread(Api.SYNCHRONIZE, false, _threadId = Api.GetCurrentThreadId());

			ThreadPool.QueueUserWorkItem(_this => (_this as inputBlocker)._ThreadProc(), this);
			//TODO3: what if thread pool is very busy? Eg if scripts use it incorrectly. Maybe better have own internal pool.

			Api.WaitForSingleObject(_syncEvent, Timeout.Infinite);
			GC.KeepAlive(this);
		}

		/// <summary>
		/// Calls <see cref="Stop"/>.
		/// </summary>
		public void Dispose() {
			if (!_disposed) {
				_disposed = true;
				Stop();
				GC.SuppressFinalize(this);
			}
		}

		///
		~inputBlocker() => _CloseHandles();

		void _CloseHandles() {
			if (!_syncEvent.Is0) {
				_syncEvent.Dispose();
				_stopEvent.Dispose();
				_threadHandle.Dispose();
			}
		}

		/// <summary>
		/// Stops blocking.
		/// Plays back blocked keys if need. See <see cref="ResendBlockedKeys"/>.
		/// Does nothing if currently is not blocking.
		/// </summary>
		/// <param name="discardBlockedKeys">Do not play back blocked key-down events recorded because of <see cref="ResendBlockedKeys"/>.</param>
		public void Stop(bool discardBlockedKeys = false) {
			if (_block == 0) return;
			_block = 0;
			_discardBlockedKeys = discardBlockedKeys;
			Api.SetEvent(_stopEvent);
			Api.WaitForSingleObject(_syncEvent, Timeout.Infinite);
			_CloseHandles();
		}

		const int c_maxResendTime = 10000;

		void _ThreadProc() {
			WindowsHook hk = null, hm = null; WinEventHook hwe = null;
			try {
				try {
					if (_block.Has(BIEvents.Keys))
						hk = WindowsHook.Keyboard(_keyHookProc ??= _KeyHookProc);
					if (_block.HasAny(BIEvents.MouseClicks | BIEvents.MouseMoving))
						hm = WindowsHook.Mouse(_mouseHookProc ??= _MouseHookProc);
				}
				catch (AuException e1) { Debug_.Print(e1); _block = 0; return; } //failed to hook

				//This prevents occassional inserting a foreign key after the first our-script-pressed key.
				//To reproduce, let our script send small series of chars in loop, and simultaneously a foreign script send other chars.
				wait.doEvents();

				//print.it("started");
				Api.SetEvent(_syncEvent);

				//the hook detects Ctrl+Alt+Del, Win+L, UAC consent, etc. SystemEvents.SessionSwitch only Win+L.
				try { hwe = new WinEventHook(EEvent.SYSTEM_DESKTOPSWITCH, 0, _winEventProc ??= _WinEventProc); }
				catch (AuException e1) { Debug_.Print(e1); } //failed to hook

				wait.Wait_(-1, WHFlags.DoEvents, new IntPtr[] { _stopEvent, _threadHandle });

				if (_blockedKeys != null) {
					bool onlyUp = _discardBlockedKeys || Environment.TickCount64 - _startTime > c_maxResendTime;
					_blockedKeys.SendBlocked_(onlyUp);
				}
				//print.it("ended");
			}
			finally {
				_blockedKeys = null;
				hk?.Dispose();
				hm?.Dispose();
				hwe?.Dispose();
				Api.SetEvent(_syncEvent);
			}
			GC.KeepAlive(this);
		}

		Action<HookData.Keyboard> _keyHookProc;
		Action<HookData.Mouse> _mouseHookProc;
		Action<HookData.WinEvent> _winEventProc;

		void _KeyHookProc(HookData.Keyboard x) {
			if (_DontBlock(x.IsInjected, x.dwExtraInfo, x.vkCode)) {
				//print.it("ok", x.vkCode, !x.IsUp);
				return;
			}
			//print.it(message, x.vkCode);

			//if(x.vkCode == KKey.Delete && !x.IsUp) {
			//	//Could detect Ctrl+Alt+Del here. But SetWinEventHook(SYSTEM_DESKTOPSWITCH) is better.
			//}

			if (ResendBlockedKeys && Environment.TickCount64 - _startTime < c_maxResendTime) {
				//If Shift is set to turn off CapsLock, on Shift the hook receives LShift down and CapsLock down/up with no 'injected' flag, even if the Shift was pressed by a script.
				//If we resend them, the hook catches the resent keys, and the resent LShift creates an infinite loop (actually for 10 s, see c_maxResendTime).
				//Workaround: don't resend these keys if isCapsLock and the system setting is active.
				//Also SendBlocked_ prevents such infinite loop in any case.
				bool no = false;
				if (x.vkCode == KKey.CapsLock || (x.vkCode == KKey.LShift && !x.IsUp)) {
					no = keys.isCapsLock && keys.IsCapsLockShiftOff_();
				}

				if (!no) {
					_blockedKeys ??= new keys(null);
					//print.it("blocked", x.vkCode, !x.IsUp, x.IsInjected);
					_blockedKeys.AddRaw_(x.vkCode, (ushort)x.scanCode, x.SendInputFlags_);
				}
			}
			x.BlockEvent();
		}

		void _MouseHookProc(HookData.Mouse x) {
			bool isMMove = x.Event == HookData.MouseEvent.Move;
			switch (_block & (BIEvents.MouseClicks | BIEvents.MouseMoving)) {
			case BIEvents.MouseClicks | BIEvents.MouseMoving: break;
			case BIEvents.MouseClicks: if (isMMove) return; break;
			case BIEvents.MouseMoving: if (!isMMove) return; break;
			}
			if (!_DontBlock(x.IsInjected, x.dwExtraInfo, 0, isMMove)) x.BlockEvent();
		}

		bool _DontBlock(bool isInjected, nint extraInfo, KKey vk = 0, bool isMMove = false) {
			if (_pause) return true;
			if (isInjected) {
				//if(DontBlockInjected || (extraInfo != default && extraInfo == DontBlockInjectedExtraInfo)) return true;
				if (DontBlockInjected) return true;
			}
			wnd w;
			if (vk != 0) {
				//var a = DontBlockKeys;
				//if(a != null) foreach(var k in a) if(vk == k) return true;
				w = wnd.active;
			} else {
				w = isMMove ? wnd.active : wnd.fromMouse();
				//note: don't use hook's pt, because of a bug in some OS versions.
				//note: for wheel it's better to use FromMouse.
			}
			if (w.ThreadId == _threadId) return true;
			return false;
		}

		void _WinEventProc(HookData.WinEvent x) {
			//the hook is called before and after Ctrl+Alt+Del screen. Only idEventThread different.
			//	GetForegroundWindow returns 0. WTSGetActiveConsoleSessionId returns main session.

			//print.it("desktop switch"); //return;

			_startTime = 0; //don't resend Ctrl+Alt+Del and other blocked keys
			if (!ResumeAfterCtrlAltDelete)
				ThreadPool.QueueUserWorkItem(_this => (_this as inputBlocker).Stop(), this);
		}

		/// <summary>
		/// Continue blocking when returned from a special screen where blocking is disabled: <c>Ctrl+Alt+Delete</c>, [](xref:uac) consent, etc.
		/// </summary>
		public bool ResumeAfterCtrlAltDelete { get; set; }

		/// <summary>
		/// Record blocked keys, and play back when stopped blocking.
		/// </summary>
		/// <remarks>
		/// Will not play back if: 1. The blocking time is > 10 seconds; then plays back only key-up events. 2. Detected <c>Ctrl+Alt+Delete</c>, [](xref:uac) consent or some other special screen. 3. Called <see cref="Pause"/>.
		/// </remarks>
		public bool ResendBlockedKeys { get; set; }

		/// <summary>
		/// Don't block software-generated key/mouse events.
		/// If <c>false</c> (default), only events generated by functions of this library are not blocked.
		/// </summary>
		public bool DontBlockInjected { get; set; }

		//rejected. Will be added later if need. Maybe a callback instead.
		///// <summary>
		///// Don't block software-generated key/mouse events if this extra info value was set when calling API <ms>SendInput</ms>.
		///// </summary>
		///// <remarks>
		///// Regardless of the property value, events generated by functions of this library are never blocked.
		///// </remarks>
		//public nint DontBlockInjectedExtraInfo { get; set; }

		///// <summary>
		///// Don't block these keys.
		///// </summary>
		///// <remarks>
		///// For modifier keys use the left/right key code: <c>LCtrl</c>, <c>RCtrl</c>, <c>LShift</c>, <c>RShift</c>, <c>LAlt</c>, <c>RAlt</c>, <c>Win</c>, <c>RWin</c>.
		///// </remarks>
		//public static KKey[] DontBlockKeys { get; set; }

		/// <summary>
		/// Gets or sets whether the blocking is paused.
		/// </summary>
		/// <remarks>
		/// The <c>set</c> function is much faster than <see cref="Stop"/>/<see cref="Start"/>. Does not remove hooks etc. Discards blocked keys.
		/// </remarks>
		public bool Pause {
			get => _pause;
			set {
				_pause = value;
				_startTime = 0; //don't resend blocked keys
			}
		}
		bool _pause;
	}
}

namespace Au.Types
{
	/// <summary>
	/// Used with <see cref="inputBlocker"/> class to specify what user input types to block (keys, mouse).
	/// </summary>
	[Flags]
	public enum BIEvents
	{
		/// <summary>
		/// Do not block.
		/// </summary>
		None,

		/// <summary>
		/// Block keys. Except if generated by functions of this library.
		/// </summary>
		Keys = 1,

		/// <summary>
		/// Block mouse clicks and wheel. Except if generated by functions of this library.
		/// </summary>
		MouseClicks = 2,

		/// <summary>
		/// Block mouse moving. Except if generated by functions of this library.
		/// </summary>
		MouseMoving = 4,

		/// <summary>
		/// Block keys, mouse clicks, wheel and mouse moving. Except if generated by functions of this library.
		/// This flag combines all other non-zero flags.
		/// </summary>
		All = 7,
	}


}
